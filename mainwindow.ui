<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>1323</width>
    <height>811</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Learn Mips</string>
  </property>
  <widget class="QWidget" name="centralwidget">
   <widget class="QWidget" name="sideMenuWidget" native="true">
    <property name="geometry">
     <rect>
      <x>0</x>
      <y>0</y>
      <width>241</width>
      <height>761</height>
     </rect>
    </property>
    <widget class="QToolBox" name="lessonMenu">
     <property name="geometry">
      <rect>
       <x>0</x>
       <y>0</y>
       <width>211</width>
       <height>761</height>
      </rect>
     </property>
     <property name="autoFillBackground">
      <bool>true</bool>
     </property>
     <property name="currentIndex">
      <number>0</number>
     </property>
     <property name="tabSpacing">
      <number>27</number>
     </property>
     <widget class="QWidget" name="welcome">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Welcome!</string>
      </attribute>
      <widget class="TabButton" name="tb10_1">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>0</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Welcome!</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="lesson1">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Lesson 1 - What is MIPS?</string>
      </attribute>
      <widget class="TabButton" name="tb1_1">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>0</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>About MIPS</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb1_2">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>40</y>
         <width>151</width>
         <height>29</height>
        </rect>
       </property>
       <property name="text">
        <string>The addi Instruction</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb1_3">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>80</y>
         <width>151</width>
         <height>29</height>
        </rect>
       </property>
       <property name="text">
        <string>The $zero Register</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb1_4">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>120</y>
         <width>151</width>
         <height>29</height>
        </rect>
       </property>
       <property name="text">
        <string>Challenge 1</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="lesson2">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <property name="font">
       <font>
        <bold>false</bold>
       </font>
      </property>
      <attribute name="label">
       <string>Lesson 2 - SRL and SLL</string>
      </attribute>
      <widget class="TabButton" name="tb2_1">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>0</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>SRL and SLL</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb2_2">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>40</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Multiply and Divide</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb2_3">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>80</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Challenge 2</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="lesson3">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Lesson 3 - ASCII Strings</string>
      </attribute>
      <widget class="TabButton" name="tb3_1">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>0</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Defining ASCII Strings</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb3_2">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>40</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>syscalls</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb3_3">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>80</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Challenge 3</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="lesson4">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Lesson 4 - Labels</string>
      </attribute>
      <widget class="TabButton" name="tb4_1">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>0</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Labels/Branch Instructions</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb4_2">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>40</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>For Loop Example</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb4_3">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>80</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Challenge 4</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="lesson5">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Lesson 5 - The Stack</string>
      </attribute>
      <widget class="TabButton" name="tb5_3">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>80</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Challenge 5</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb5_1">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>0</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Loads, Stores and the Stack</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb5_2">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>40</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Example Usage</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="lesson6">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Lesson 6 - LB, SB, and LA</string>
      </attribute>
      <widget class="TabButton" name="tb6_3">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>80</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Challenge 6</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb6_1">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>0</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Loading Bytes in MIPS</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb6_2">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>40</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Manipulating .asciiz Strings</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="lesson7">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Lesson 7 - XOR and XORI</string>
      </attribute>
      <widget class="TabButton" name="tb7_3">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>80</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Challenge 7</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb7_1">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>0</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>xor and xori</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb7_2">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>40</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>One-Time Pads</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="lesson8">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Lesson 8 - JAL and JR</string>
      </attribute>
      <widget class="TabButton" name="tb8_1">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>0</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Jal and Jr</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb8_2">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>40</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Challenge 8</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="bonus1">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Bonus Lesson! - Fibonacci</string>
      </attribute>
      <widget class="TabButton" name="tb9_1">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>0</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Fibonacci Sequence</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb9_2">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>40</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Calculating the Nth Term</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
      <widget class="TabButton" name="tb9_3">
       <property name="geometry">
        <rect>
         <x>10</x>
         <y>80</y>
         <width>191</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Bonus Challenge</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
     <widget class="QWidget" name="openEdit">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
        <width>211</width>
        <height>189</height>
       </rect>
      </property>
      <attribute name="label">
       <string>Open Editor</string>
      </attribute>
      <widget class="TabButton" name="tb12_1">
       <property name="geometry">
        <rect>
         <x>20</x>
         <y>0</y>
         <width>151</width>
         <height>31</height>
        </rect>
       </property>
       <property name="text">
        <string>Open Editor</string>
       </property>
       <property name="checkable">
        <bool>false</bool>
       </property>
       <property name="checked">
        <bool>false</bool>
       </property>
       <property name="autoExclusive">
        <bool>false</bool>
       </property>
      </widget>
     </widget>
    </widget>
    <widget class="Line" name="menuLine">
     <property name="geometry">
      <rect>
       <x>200</x>
       <y>30</y>
       <width>21</width>
       <height>731</height>
      </rect>
     </property>
     <property name="orientation">
      <enum>Qt::Vertical</enum>
     </property>
    </widget>
    <widget class="QPushButton" name="showHideMenuButton">
     <property name="geometry">
      <rect>
       <x>210</x>
       <y>370</y>
       <width>31</width>
       <height>51</height>
      </rect>
     </property>
     <property name="text">
      <string/>
     </property>
     <property name="icon">
      <iconset resource="resource.qrc">
       <normaloff>:/res/images/chevron-left-icon.png</normaloff>:/res/images/chevron-left-icon.png</iconset>
     </property>
     <property name="iconSize">
      <size>
       <width>30</width>
       <height>30</height>
      </size>
     </property>
    </widget>
   </widget>
   <widget class="QGroupBox" name="codingGroupBox">
    <property name="enabled">
     <bool>false</bool>
    </property>
    <property name="geometry">
     <rect>
      <x>620</x>
      <y>740</y>
      <width>81</width>
      <height>21</height>
     </rect>
    </property>
    <layout class="QGridLayout" name="codingLayout" rowstretch="1,1,1" columnstretch="1,1,1,1,1">
     <item row="0" column="0" colspan="2">
      <widget class="QPushButton" name="runButton">
       <property name="maximumSize">
        <size>
         <width>220</width>
         <height>16777215</height>
        </size>
       </property>
       <property name="text">
        <string>Run Code</string>
       </property>
      </widget>
     </item>
     <item row="0" column="2" colspan="2">
      <widget class="QPushButton" name="submitButton">
       <property name="maximumSize">
        <size>
         <width>220</width>
         <height>16777215</height>
        </size>
       </property>
       <property name="text">
        <string>Check Solution</string>
       </property>
      </widget>
     </item>
     <item row="2" column="0" colspan="4">
      <widget class="QTextBrowser" name="console">
       <property name="maximumSize">
        <size>
         <width>16777215</width>
         <height>50</height>
        </size>
       </property>
       <property name="sizeAdjustPolicy">
        <enum>QAbstractScrollArea::AdjustToContentsOnFirstShow</enum>
       </property>
       <property name="html">
        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
hr { height: 1px; border-width: 0; }
li.unchecked::marker { content: &quot;\2610&quot;; }
li.checked::marker { content: &quot;\2612&quot;; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Segoe UI'; font-size:9pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
       </property>
      </widget>
     </item>
     <item row="2" column="4">
      <widget class="QPushButton" name="clearConsoleButton">
       <property name="maximumSize">
        <size>
         <width>50</width>
         <height>50</height>
        </size>
       </property>
       <property name="text">
        <string>Clear</string>
       </property>
      </widget>
     </item>
     <item row="1" column="0" colspan="5">
      <widget class="CodeEditor" name="codeEdit"/>
     </item>
    </layout>
   </widget>
   <widget class="QPushButton" name="nextButton">
    <property name="geometry">
     <rect>
      <x>1010</x>
      <y>700</y>
      <width>101</width>
      <height>41</height>
     </rect>
    </property>
    <property name="text">
     <string>Next</string>
    </property>
   </widget>
   <widget class="QPushButton" name="previousButton">
    <property name="enabled">
     <bool>false</bool>
    </property>
    <property name="geometry">
     <rect>
      <x>220</x>
      <y>700</y>
      <width>101</width>
      <height>41</height>
     </rect>
    </property>
    <property name="text">
     <string>Previous</string>
    </property>
    <property name="flat">
     <bool>false</bool>
    </property>
   </widget>
   <widget class="QStackedWidget" name="pageWidget">
    <property name="enabled">
     <bool>true</bool>
    </property>
    <property name="geometry">
     <rect>
      <x>10</x>
      <y>0</y>
      <width>1311</width>
      <height>691</height>
     </rect>
    </property>
    <property name="currentIndex">
     <number>12</number>
    </property>
    <widget class="QWidget" name="page0">
     <widget class="QTabWidget" name="sectionTabs">
      <property name="geometry">
       <rect>
        <x>360</x>
        <y>10</y>
        <width>531</width>
        <height>711</height>
       </rect>
      </property>
      <property name="tabPosition">
       <enum>QTabWidget::West</enum>
      </property>
      <property name="currentIndex">
       <number>11</number>
      </property>
      <widget class="QWidget" name="s1Tab">
       <attribute name="title">
        <string>Lesson 1</string>
       </attribute>
       <widget class="QTabWidget" name="s1Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_1">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QLabel" name="label_9">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>611</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;What is MIPS?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;MIPS is a type of Assembly Language. This means that it is the closest to machine code that a human can still read with relative ease. Each instruction refers to actual functions the circuits on the cpu can perform.&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;What is a register?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;The cpu has several small blocks of memory that it can use to store some values before saving them to a longer-term memory. It is useful to think of the registers as a “scratch pad” to do computations on or variable names. Registers roughly can be referred to with $t0-t6 for “temp” variables, $a0 for function arguments, $v0-v1 for return values, $s1-s6 for “saved temporary,” $zero that always refers to 0, and the $ra register which is used to save the program counter when a jal (jump and link) occurs. There is also the stack pointer $sp that keeps track of the memory address of the stack for reading and writing to/from.&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;How does each line of code look?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Each line of code will look something like this: add $t0, $t1, $t3, or instruction $dest, $source, $source The “add” is the instruction, which defines what the line of code will do. The destination register is the register that will be changed, and the source register will contain what is read. There are several types of instructions, which determine how many source, destination, and immediates (32 bit numbers) are included as a parameter for the instruction.&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;What is .data and .text?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;These are tags that determine how the instructions below are interpreted. .data refers to resources such as ascii strings while .text refers to regular code. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_1">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
         <widget class="QLabel" name="label_3">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>621</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;The addi (Add Immediate) instruction in MIPS assembly language is used to add a signed 32-bit immediate value to the contents of a register and store the result in another register. The syntax for the addi instruction is as follows:&lt;/p&gt;&lt;p&gt;addi $destination, $source, immediate&lt;br/&gt;&lt;/p&gt;&lt;p&gt;- `$destination`: The register where the result of the addition&lt;/p&gt;&lt;p&gt;will be stored.&lt;/p&gt;&lt;p&gt;- `$source`: The register containing the value to which the&lt;/p&gt;&lt;p&gt;immediate will be added.&lt;/p&gt;&lt;p&gt;- `immediate`: A signed 32-bit immediate value that will be&lt;/p&gt;&lt;p&gt;added to the contents of the `$source` register.&lt;/p&gt;&lt;p&gt;For example: &lt;/p&gt;&lt;p&gt;addi $t0, $t1, -100&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;This instruction adds the immediate value 100 to the contents of register `$t1` and stores the result in register `$t0`. The add instruction is similar to addi, but uses all registers as parameters:&lt;/p&gt;&lt;p&gt;add $t1, $t3, $t0 # store $t3+$t0 in $t1&lt;/p&gt;&lt;p&gt;The sub and subi instruction also exist as pseudo-instructions, meaning they are translated to add instructions at compile time:&lt;/p&gt;&lt;p&gt;subi $t1, $t3, 5&lt;/p&gt;&lt;p&gt;Translates to:&lt;/p&gt;&lt;p&gt;addi $t1, $t3, -5&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t3_1">
         <attribute name="title">
          <string>Learn 3</string>
         </attribute>
         <widget class="QLabel" name="label_4">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>131</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;In MIPS assembly language, the $zero register is a special register &lt;/p&gt;&lt;p&gt;that always contains the value zero. It is a hardwired register and &lt;/p&gt;&lt;p&gt;cannot be modified. The $zero register can be used in various ways, &lt;/p&gt;&lt;p&gt;including storing an immediate value in a register like so:&lt;/p&gt;&lt;p&gt;addi $t0, $zero, 11 # store 11 in $t0&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="scaledContents">
           <bool>false</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t4_1">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
         <widget class="QLabel" name="label_5">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>91</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;A secret value has been placed in register $a0.&lt;/p&gt;&lt;p&gt;Use the addi instruction to add 3 to the value in $a0, then place that updated value in the $v0 register (commonly used for a return value). Click check solution to see if your answer is correct!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s2Tab">
       <attribute name="title">
        <string>Lesson 2</string>
       </attribute>
       <widget class="QTabWidget" name="s2Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_2">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QLabel" name="label_15">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>10</y>
            <width>481</width>
            <height>631</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;SRL (Shift Right Logical)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The MIPS 'srl' (Shift Right Logical) instruction shifts the bits of a register to the right by a specified number of positions. Each bit is shifted to the next lower position, and 0s are introduced at the most significant bit.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Suppose we have the following value in a register:&lt;/p&gt;&lt;p&gt;$t0 = 0b10101010 (decimal 170)&lt;/p&gt;&lt;p&gt;Performing srl $t1, $t0, 3 will shift the bits in $t0 right by 3 positions and store the result in $t1:&lt;/p&gt;&lt;p&gt;$t1 = 0b00010101 (decimal 21)&lt;/p&gt;&lt;p&gt;After shifting right by 3 positions, the original bits are moved three places to the right, and zeros are filled in on the left.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;SLL (Shift Left Logical)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The MIPS sll (Shift Left Logical) instruction shifts the bits of a register to the left by a specified number of positions. Each bit is shifted to the next higher position, and 0s are introduced at the least significant bit.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example&lt;/span&gt;:&lt;/p&gt;&lt;p&gt;Suppose we have the following value in a register:&lt;/p&gt;&lt;p&gt;$t0 = 0b00001111 (decimal 15)&lt;/p&gt;&lt;p&gt;Performing sll $t1, $t0, 4 will shift the bits in $t0 left by 4 positions and store the result in $t1:&lt;/p&gt;&lt;p&gt;$t1 = 0b11110000 (decimal 240)&lt;/p&gt;&lt;p&gt;The SLL operation multiplies the number by 2 for each shift position if the number &lt;/p&gt;&lt;p&gt;is unsigned&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_2">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
         <widget class="QLabel" name="label_16">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>5</y>
            <width>481</width>
            <height>421</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;In MIPS assembly language, SLL (Shift Left Logical) and SRL (Shift Right Logical) are &lt;/p&gt;&lt;p&gt;bitwise operations that can effectively be used to multiply and &lt;/p&gt;&lt;p&gt;divide numbers by powers of two. &lt;/p&gt;&lt;p&gt;Understanding these operations can significantly enhance your ability to write efficient &lt;/p&gt;&lt;p&gt;code for arithmetic operations. Here’s a detailed guide on how these operations work and &lt;/p&gt;&lt;p&gt;how they correspond to multiplication and division.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Use in Multiplication: &lt;/span&gt;&lt;/p&gt;&lt;p&gt;Shifting bits to the left by one position effectively multiplies the binary number by 2.&lt;/p&gt;&lt;p&gt;For example, if you have a binary number '0001' (which is 1 in decimal)&lt;/p&gt;&lt;p&gt;and you apply SLL by 1, it becomes '0010', which is 2 in decimal.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Use in Division: &lt;/span&gt;&lt;/p&gt;&lt;p&gt;Shifting bits to the right by one position effectively divides the binary number by 2&lt;/p&gt;&lt;p&gt;(ignoring the remainder). For example, if you have a binary number '0010' (which is 2 in decimal) and you apply SRL by 1, it becomes '0001', &lt;/p&gt;&lt;p&gt;which is 1 in decimal.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t3_2">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
         <widget class="QLabel" name="label_17">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>191</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;For this challenge, please isolate the least significant 8 bits of the number stored in $a0 by using srl and sll, and store that result in $v0.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;If the number in a0 is 001011001110111, then $v0 should hold 01110111. (These binary sequences are assumed to be prepended with zeros to extend them to 32 bits)&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s3Tab">
       <attribute name="title">
        <string>Lesson 3</string>
       </attribute>
       <widget class="QTabWidget" name="s3Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_3">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QLabel" name="label_18">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>291</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;How to Define an ASCII String&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;A string needs to be defined after a .data tag. The declaration should be preceded by an asciiz operator and a label. For example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;.data&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;helloText: .asciiz &amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;This example stores the text &amp;quot;Hello World!&amp;quot; as ascii characters refered to by the label &amp;quot;helloText&amp;quot;. Each character takes up one byte in memory, so a single word can store 4 characters. This is important later for navigating through a string, one character at a time.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;After defining any strings, a .text tag should be used to signify that everything following it is code.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_3">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
         <widget class="QLabel" name="label_19">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>521</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;What is a syscall?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;A syscall is a Mips instruction that tells the operating system to do something that the program can't do itself. A syscall is called by simply typing syscall. It uses the value in $v0 as an opcode, which dictates what the syscall will do. Any parameters the syscall needs are stored in the $a0 register. A syscall to write a string to the console might look like this:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;.text&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;la $a0, helloText&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $v0, $zero, 4&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;syscall&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In the above example, &amp;quot;la $a0, helloText&amp;quot; loads the address of the string refered to by the label helloText, defined in Learn 1 under the .data tag, into $a0. This is the parameter for the syscall. &amp;quot;addi $v0, $zero, 4&amp;quot; sets the value of $v0 to 4. 4 is the op code to print a string. When printing an integer or char, $a0 should contain the actual integer or char and not an address. What exact codes are supported depends on the assembler, the program that converts mips to real machine code. The codes supported in the LearnMips app are:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;1: Print Integer&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;4: Print String&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;10: Exit&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;11: Print Char&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t3_3">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
         <widget class="QLabel" name="label_20">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>301</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;The Mystery of the Stolen Eggs&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Jerry is a known egg thief. To figure out how many eggs Jerry has stolen, you must print the value Jerry hid in $s0 that shows the full extent of his crimes, however, you must reveal this to your friends and a simple number isn't dramatic enough. Give the number some context when you print it out.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In this challenge, you will define a string that contains &amp;quot;Jerry STOLE &amp;quot; and another string that contains &amp;quot; eggs on his spree!&amp;quot; (note the spaces after &amp;quot;stole&amp;quot; and before &amp;quot;eggs&amp;quot;).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;You will then print &amp;quot;Jerry STOLE &amp;quot; + $s0 + &amp;quot; eggs on his spree!&amp;quot; to the console. The solution is case sensitive&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s4Tab">
       <attribute name="title">
        <string>Lesson 4</string>
       </attribute>
       <widget class="QTabWidget" name="s4Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_4">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QLabel" name="label_11">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>461</width>
            <height>581</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:600;&quot;&gt;Labels and Branch Instructions&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Labels and branch instructions are used to control the flow of execution in a program. Here's a brief overview of how they work:&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:14pt; font-weight:600;&quot;&gt;Labels&lt;/span&gt;&lt;/h2&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Labels are used to mark specific locations in your code.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;They are defined by placing a label name followed by a colon (&lt;span style=&quot; font-family:'monospace';&quot;&gt;:&lt;/span&gt;) at the beginning of a line. (valid labels are alphanumeric, no spaces)&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Labels can be referenced by branch or jump instructions to change the program counter and execution flow.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;Branch Instructions&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;j&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Jump)&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;j examplelabel&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Unconditionally jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Execution continues from the instruction at the label.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;beq&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch If Equal)&lt;/span&gt;&lt;/h3&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;beq $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the values are equal, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the values are not equal, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;blt&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch if Less Than)&lt;/span&gt;&lt;/h3&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;blt $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is less than the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is greater than or equal to the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;bgt&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch if Greater Than)&lt;/span&gt;&lt;/h3&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;bgt $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is greater than the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is less than or equal to the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;By using labels and branch instructions, you can create conditional statements, loops, and control the overall flow of your program. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_4">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
         <widget class="QLabel" name="label_12">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>281</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Here is an example mips program for loop for reference:&lt;br/&gt;&lt;/p&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;main:&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; addi $t0, $zero, 0 # initialize counter i to 0&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; addi $t1, $zero, 5 # set the upper bound to 5&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; addi $t2, $zero, 0 # initialize sum to 0&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace';&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;loop:&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; bgt $t0, $t1, end_loop # if i &amp;gt; 5, jump to end_loop&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; add $t2, $t2, $t0  # sum = sum + i&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; addi $t0, $t0, 1 # i = i + 1&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; j loop    # jump back to the beginning of the loop&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace';&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;end_loop:&lt;/span&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="textFormat">
           <enum>Qt::AutoText</enum>
          </property>
          <property name="scaledContents">
           <bool>false</bool>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t3_4">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
         <widget class="QLabel" name="label_10">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>71</height>
           </rect>
          </property>
          <property name="text">
           <string>The goal of this challenge is to calculate the sum of the numbers from 0 to whatever is in $a0, with a specific condition: If the current number is less than 5, add 5 to the sum. Otherwise, add the current number to the sum, and store the sum in $v0.</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s5Tab">
       <attribute name="title">
        <string>Lesson 5</string>
       </attribute>
       <widget class="QTabWidget" name="s5Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_5">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QTextBrowser" name="textBrowser">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>731</height>
           </rect>
          </property>
          <property name="html">
           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
hr { height: 1px; border-width: 0; }
li.unchecked::marker { content: &quot;\2610&quot;; }
li.checked::marker { content: &quot;\2612&quot;; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:16pt; font-weight:600;&quot;&gt;Loads, Stores, and the Stack&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;The lw (load word) and sw (store word) opcodes are used to transfer data between memory and registers in MIPS assembly. They are commonly used in conjunction with the sp (stack pointer) register to manipulate the stack.&lt;/p&gt;
&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt;lw (Load Word):&lt;/span&gt;&lt;/h3&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;Syntax: lw $t0, offset($s0)&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The lw instruction loads a 32-bit word from memory into a register.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;It calculates the memory address by adding the offset (a constant immediate value) to the contents of the source register $s0.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The loaded word is then stored in the target register $t0.&lt;/span&gt;&lt;/p&gt;
&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt;sw (Store Word):&lt;/span&gt;&lt;/h3&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;Syntax: sw $t0, offset($s0)&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The sw instruction stores a 32-bit word from a register into memory.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;It calculates the memory address by adding the offset (a constant value) to the contents of the source register $s0.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The word from the target register $t0 is then stored at the calculated memory address.&lt;/span&gt;&lt;/p&gt;
&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt;sp (Stack Pointer):&lt;/span&gt;&lt;/h3&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The sp register is a special-purpose register used to point to the top of the stack.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;It is conventionally used to manage the stack, which is a region of memory used for temporary storage.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The stack grows downward in memory, so the sp register is decremented when pushing data onto the stack and incremented when popping data off the stack.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-weight:700;&quot;&gt;NOTE: You must subtract from the $sp register before storing on the stack otherwise there will not be room to store anything.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Example:&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;addi $sp, $sp, -4 # make room for one 32 bit value&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;# ... loads and stores here .. &lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;addi $sp, $sp, 4 # don't need the value on the stack any more&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_5">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
         <widget class="QLabel" name="label_14">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>341</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt;Example Usage:&lt;/span&gt;&lt;/p&gt;&lt;h4 style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:medium; font-weight:600;&quot;&gt;Push a word onto the stack&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    # Decrement stack pointer by 8 bytes (enough for 2 words)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    addi $sp, $sp, -8&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    sw $t0, 0($sp)# Store word from $t0 on the stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    sw $t1, 4($sp)# Store word from $t1 on the stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;h4 style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:medium; font-weight:600;&quot;&gt;Pop a word from the stack&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    lw $s0, 0($sp)# Load word from stack to $s0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    lw $s1, 4($sp)# Load word from stack to $s0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    addi $sp, $sp, 8 # Increment stack pointer by 4 bytes&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t3_5">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
         <widget class="QLabel" name="label_13">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>91</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;lw sw Challenge&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Please load in 3 32-bit words from the stack (access with stack pointer), and then add them all together and store it at offset 60 in the stack pointer register. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s6Tab">
       <attribute name="title">
        <string>Lesson 6</string>
       </attribute>
       <widget class="QTabWidget" name="s6Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_6">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QLabel" name="label_25">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>441</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;Loading Bytes in MIPS&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In MIPS assembly language, there are three main instructions used for loading and storing 8 bits of data between memory and registers.&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt;1. &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:x-large; font-weight:700;&quot;&gt;lb&lt;/span&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt; (Load Byte)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;The &lt;span style=&quot; font-family:'monospace';&quot;&gt;lb&lt;/span&gt; instruction is used to load a single byte (8 bits) from memory into the lower 8 bits of a register. &lt;/p&gt;&lt;p&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;lb $t0, 0($s0)&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt;2. &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:x-large; font-weight:700;&quot;&gt;sb&lt;/span&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt; (Store Byte)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;The &lt;span style=&quot; font-family:'monospace';&quot;&gt;sb&lt;/span&gt; instruction is used to store a single byte (8 bits) from a register into memory. Only the least significant byte of the register is stored.&lt;/p&gt;&lt;p&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;sb $t0, 0($s0)&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt;3. &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:x-large; font-weight:700;&quot;&gt;la&lt;/span&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt; (Load Address)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;The &lt;span style=&quot; font-family:'monospace';&quot;&gt;la&lt;/span&gt; instruction is a pseudoinstruction that is used to load the address of a label or a memory location into a register.&lt;/p&gt;&lt;p&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;la $t0, label&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_6">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
         <widget class="QLabel" name="label_26">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>701</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;Interacting with .asciiz Strings using lb and sb&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In MIPS assembly language, you can interact with &lt;span style=&quot; font-family:'monospace';&quot;&gt;.asciiz&lt;/span&gt; strings using the &lt;span style=&quot; font-family:'monospace';&quot;&gt;lb&lt;/span&gt;, &lt;span style=&quot; font-family:'monospace';&quot;&gt;sb&lt;/span&gt;, and &lt;span style=&quot; font-family:'monospace';&quot;&gt;la&lt;/span&gt; instructions. Here's how you can use these instructions to manipulate strings:&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt;1. Loading a String Address&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;To access a string, you first need to load its address into a register using the &lt;span style=&quot; font-family:'monospace';&quot;&gt;la&lt;/span&gt; instruction.&lt;/p&gt;&lt;pre style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;.data&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; str: .asciiz &amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace';&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;.text&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; # Load address of str into $t0&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; la $t0, myString &lt;/span&gt;&lt;/pre&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt;2. Loading Characters from a String&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;To load individual characters from a string, you can use the &lt;span style=&quot; font-family:'monospace';&quot;&gt;lb&lt;/span&gt; instruction along with the address stored in a register.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;# Load the first character ('H') into $t1&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    lb $t1, 0($t0)&lt;br/&gt;    # Load the second character ('e') into $t2 &lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    lb $t2, 1($t0)      &lt;/span&gt;&lt;/pre&gt;&lt;p&gt;You can use offsets from the base address to access different characters in the string.&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt;3. Storing Characters in a String&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;To store characters in a string, you can use the &lt;span style=&quot; font-family:'monospace';&quot;&gt;sb&lt;/span&gt; instruction along with the address stored in a register.&lt;/p&gt;&lt;pre style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    # Load the character 'a' into $t3    &lt;br/&gt;    addi $t3, $zero, 97&lt;br/&gt;    # Store 'A' as the first character of str   &lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    sb $t3, 0($t0)     &lt;/span&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t3_6">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
         <widget class="QLabel" name="label_27">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>131</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;There is a string stored in the data section under the label myString.  Please load the address of myString into a register of choise, and iterate through the string by incrementing the address by one byte and loading 8 bits until the null terminating character (0x00) is reached. For each character (assume each character is alphabetic), you should add the correct ammount to that character code to make it a capital letter, then re store it in the correct position in the string.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s7Tab">
       <attribute name="title">
        <string>Lesson 7</string>
       </attribute>
       <widget class="QTabWidget" name="s7Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_7">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QLabel" name="label_6">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>321</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;The MIPS &amp;quot;xor&amp;quot; (exclusive OR) and &amp;quot;xori&amp;quot; (exclusive OR immediate) instructions perform a bitwise XOR operation on two operands. The &amp;quot;xor&amp;quot; instruction operates on two registers, while &amp;quot;xori&amp;quot; operates on a register and an immediate value.&lt;/p&gt;&lt;p&gt;Example:&lt;br/&gt;Suppose we have the following values in registers:&lt;br/&gt;$t0 = 0b1010 (decimal 10)&lt;br/&gt;$t1 = 0b1100 (decimal 12)&lt;/p&gt;&lt;p&gt;Performing &amp;quot;xor $t2, $t0, $t1&amp;quot; will result in:&lt;br/&gt;$t2 = 0b0110 (decimal 6)&lt;/p&gt;&lt;p&gt;The XOR operation compares each bit of the operands and sets the corresponding bit in the result to 1 if the bits are different, and 0 if they are the same. In this example, the bits in positions 2 and 3 of $t0 and $t1 differ, so those bits are set to 1 in the result, while the other bits are set to 0.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_7">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
         <widget class="QLabel" name="label_7">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>421</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;A one-time pad (OTP) is a simple yet theoretically unbreakable encryption technique that uses a secret random key (the &amp;quot;pad&amp;quot;) to encrypt a message. The key must be at least as long as the message and is used only once, hence the name &amp;quot;one-time&amp;quot; pad.&lt;/p&gt;&lt;p&gt;In OTP encryption, each bit or character of the plaintext message is XORed with the corresponding bit or character of the key. The resulting ciphertext can only be decrypted by XORing it with the same key.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;For example, let's say we have a plaintext message &amp;quot;HELLO&amp;quot; and an arbitrary key &amp;quot;XMCKL&amp;quot;. As binary:&lt;/p&gt;&lt;p&gt;Plaintext: 01001000 01000101 01001100 01001100 01001111&lt;/p&gt;&lt;p&gt;Key: 01011000 01001101 01000011 01001011 01001100&lt;/p&gt;&lt;p&gt;Ciphertext: 00010000 00001000 00001111 00000111 00000011&lt;/p&gt;&lt;p&gt;The ciphertext is obtained by XORing each bit of the plaintext with the corresponding bit of the key. Decryption follows the same process, XORing the ciphertext with the key to recover the original plaintext.&lt;/p&gt;&lt;p&gt;OTP encryption is unbreakable if the key is truly random, as long as the message, and never reused.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t3_7">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
         <widget class="QLabel" name="label_8">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>261</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;In this challenge, you will implement a simple XOR encryption program in MIPS assembly. The plaintext to be encrypted is stored at the &amp;quot;plaintext&amp;quot; symbol, and the encryption key is stored at the &amp;quot;key&amp;quot; symbol. Your task is to XOR each byte of the plaintext with the corresponding byte of the key and store the resulting ciphertext in a new symbol called &amp;quot;ciphertext&amp;quot;, and store the size of the ciphertext (in bytes) in $v0.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Before attempting the challenge, we encourage you to use the editor to write and run your own code using the stored plaintext and key. Feel free to use the print character (syscall 11) to print the ciphertext character by character when testing to verify if its working or not. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s8Tab">
       <attribute name="title">
        <string>Lesson 8</string>
       </attribute>
       <widget class="QTabWidget" name="s8Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_8">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QLabel" name="label_28">
          <property name="geometry">
           <rect>
            <x>10</x>
            <y>0</y>
            <width>471</width>
            <height>661</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;Jal and Jr&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The jal (jump and link) instruction jumps to a label and automatically stores the location of where it was called from in $ra (abbreviation of return address). The jr (jump return) instruction jumps to the value in $ra, or somewhere else. This can be used to implement something similar to a function. When calling jal, any values that are still needed in $t0-8 need to be saved (sw, sb, etc.) before the jal. In the context of a function, these values would need to be saved by the caller, and loaded (lw, lb, etc.) after the jal instruction. $s0-8 should be saved and loaded inside of the jal. It is standard practice to place return values in $v0-3. Let's look at an example where there are needed values in $t0 and $s0.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;sw $t0, 0($sp) #store $t0&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $sp, $sp, -4 #increment stack pointer&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;jal doStuff #jump and link to doStuff&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;lw $t0, 0($sp) #load $t0 after the jal&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;j end #jump to the end of the program&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;doStuff:&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;sw $s0, 0($sp) #store $s0&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $s0, $a0, 5 #modify $s0 and add 5 to $a0&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $v0, $s0, 0 #put the resulting value into $v0&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;lw $s0, 0($sp) #load $s0 before returning&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;jr $ra #return to the jal call and continue executing the code&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;end:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In the above example, there were no nested jals, however, if some code reached through a jal needs to execute a jal itself, $ra needs to be saved before the call and loaded after the call for the nested calls to work smoothly&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_8">
         <attribute name="title">
          <string>Challenge</string>
         </attribute>
         <widget class="QLabel" name="label_29">
          <property name="geometry">
           <rect>
            <x>8</x>
            <y>-5</y>
            <width>481</width>
            <height>341</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;Use jal/jr&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In this challenge, a secret value has been placed in $s1. The below code runs before what is in the editor:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;j skipFunction:&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addSecretNumber:&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;add $v1, $a0, $s1&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;jr $ra&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;skipFunction:&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;jal addFive&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;First, set $a0 to 10 and then use jal to jump to the addSecretNumberLabel. Second, create a label &amp;quot;addFive&amp;quot; that adds five to the value in $a0 and puts the resulting value in $v0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Hint: &lt;/span&gt; You should treat the addFive label as a function and ensure that it isnt called or inadvertently executed by your code. It will be called by the code executed before your code when it is jumped to. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s9Tab">
       <attribute name="title">
        <string>Bonus Challenge 1</string>
       </attribute>
       <widget class="QTabWidget" name="s9Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_9">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
         <widget class="QLabel" name="label_30">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>171</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;Fibonacci sequence:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The Fibonacci sequence is a famous mathematical sequence named after the Italian mathematician Leonardo Fibonacci. It is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes like this: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on.&lt;/p&gt;&lt;p&gt;The formula for the Fibonacci sequence is:&lt;br/&gt;F(n) = F(n-1) + F(n-2), where F(0) = 0 and F(1) = 1&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t2_9">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
         <widget class="QLabel" name="label_31">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>481</width>
            <height>731</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;Methods for Calculating the Nth Term of a Fibonacci Sequence&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        1.  Recursive Method:&lt;br/&gt;The recursive method is based on the definition of the Fibonacci sequence, where each number is the sum of the two preceding ones. The recursive formula is:&lt;/p&gt;&lt;p&gt;F(n) = F(n-1) + F(n-2), where F(0) = 0 and F(1) = 1&lt;/p&gt;&lt;p&gt;To calculate the nth Fibonacci number using the recursive method, you call the function with n as the argument. The function then calls itself with n-1 and n-2 as arguments until it reaches the base cases of F(0) or F(1).&lt;/p&gt;&lt;p&gt;Example:&lt;br/&gt;To calculate F(5), the recursive method will follow these steps:&lt;br/&gt;F(5) = F(4) + F(3)&lt;br/&gt;F(4) = F(3) + F(2)&lt;br/&gt;F(3) = F(2) + F(1)&lt;br/&gt;F(2) = F(1) + F(0)&lt;/p&gt;&lt;p&gt;The recursive method is straightforward to understand and implement, but it can be inefficient for large values of n due to the repeated calculations of the same Fibonacci numbers.&lt;/p&gt;&lt;ol start=&quot;2&quot; style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Formula:&lt;br/&gt;The closed-form formula, also known as Binet's formula, calculates the nth Fibonacci number directly without recursion. The formula is:&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;F(n) = (φ^n - ψ^n) / √5&lt;/p&gt;&lt;p&gt;where:&lt;/p&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;φ (phi) is the golden ratio: (1 + √5) / 2 ≈ 1.618&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;ψ (psi) is the negative reciprocal of φ: (1 - √5) / 2 ≈ -0.618&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To calculate the nth Fibonacci number using Binet's formula, you simply plug in the value of n into the formula and evaluate it.&lt;/p&gt;&lt;p&gt;Binet's formula is more efficient than the recursive method for calculating large Fibonacci numbers because it directly computes the value without recursive calls.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
        <widget class="QWidget" name="t3_9">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
         <widget class="QLabel" name="label_32">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>0</y>
            <width>491</width>
            <height>141</height>
           </rect>
          </property>
          <property name="text">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;For this bonus challenge, please calculate the nth term of the fibonacci sequence, where $a0 contains the value of n.&lt;/p&gt;&lt;p&gt;Since dividing, powers, and square roots are hard to compute with only mips, the easiest route is to use teh recursive method.&lt;/p&gt;&lt;p&gt;Store the nth term of the fibonacci sequence in $v1.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Hint: you may need to use $v0 to store the exit code, which is why v1 has the return for this challenge.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s10Tab">
       <attribute name="title">
        <string>Bonus Challenge 2</string>
       </attribute>
       <widget class="QTabWidget" name="s10Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_10">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
        </widget>
        <widget class="QWidget" name="t2_10">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
        </widget>
        <widget class="QWidget" name="t3_10">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s11Tab">
       <attribute name="title">
        <string>Bonus Challenge 3</string>
       </attribute>
       <widget class="QTabWidget" name="s11Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_11">
         <attribute name="title">
          <string>Learn 1</string>
         </attribute>
        </widget>
        <widget class="QWidget" name="t2_11">
         <attribute name="title">
          <string>Learn 2</string>
         </attribute>
        </widget>
        <widget class="QWidget" name="t3_11">
         <attribute name="title">
          <string>Challenge 1</string>
         </attribute>
        </widget>
       </widget>
      </widget>
      <widget class="QWidget" name="s12Tab">
       <attribute name="title">
        <string>Open Editor</string>
       </attribute>
       <widget class="QTabWidget" name="s12Widget">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>491</width>
          <height>761</height>
         </rect>
        </property>
        <property name="currentIndex">
         <number>0</number>
        </property>
        <widget class="QWidget" name="t1_12">
         <attribute name="title">
          <string>Free Editor</string>
         </attribute>
         <widget class="QLabel" name="label">
          <property name="geometry">
           <rect>
            <x>20</x>
            <y>10</y>
            <width>441</width>
            <height>31</height>
           </rect>
          </property>
          <property name="font">
           <font>
            <pointsize>24</pointsize>
           </font>
          </property>
          <property name="text">
           <string>Free Editor</string>
          </property>
          <property name="textFormat">
           <enum>Qt::PlainText</enum>
          </property>
          <property name="alignment">
           <set>Qt::AlignCenter</set>
          </property>
         </widget>
         <widget class="QLabel" name="label_2">
          <property name="geometry">
           <rect>
            <x>170</x>
            <y>60</y>
            <width>141</width>
            <height>20</height>
           </rect>
          </property>
          <property name="text">
           <string>Code whatever you want</string>
          </property>
         </widget>
        </widget>
       </widget>
      </widget>
     </widget>
    </widget>
    <widget class="QWidget" name="page0_1">
     <widget class="QLabel" name="label_57">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>40</y>
        <width>841</width>
        <height>631</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;Welcome to LearnMIPS!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;Click the arrow to show/hide the lesson menu&lt;br/&gt;&lt;br/&gt;Click 'Next' to go to the next page, &lt;/span&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;and 'Previous' to go to the previous page&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;Upon completing a challenge, a green checkmark will appear &lt;/span&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;next to the completed challenge in the menu&lt;/span&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;&lt;br/&gt;Try to complete them all!&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;Good luck!&lt;/span&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;&lt;br/&gt;Click Next to start the first lesson&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page1_1">
     <widget class="QLabel" name="label_21">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:600;&quot;&gt;What is MIPS?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;MIPS is a type of Assembly Language. This means that it is the closest to machine code that a human can still read with relative ease. Each instruction refers to actual functions the circuits on the cpu can perform.&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:12pt; font-weight:600;&quot;&gt;What is a register?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The cpu has several small blocks of memory that it can use to store some values before saving them to a longer-term memory. It is useful to think of the registers as a “scratch pad” to do computations on or variable names. Registers roughly can be referred to with $t0-t6 for “temp” variables, $a0 for function arguments, $v0-v1 for return values, $s1-s6 for “saved temporary,” $zero that always refers to 0, and the $ra register which is used to save the program counter when a jal (jump and link) occurs. There is also the stack pointer $sp that keeps track of the memory address of the stack for reading and writing to/from.&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:12pt; font-weight:600;&quot;&gt;What does a line of code look like?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Each line of code will look something like this: &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;add $t0, $t1, $t3, or instruction $dest, $source, $source &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The “add” is the instruction, which defines what the line of code will do. The destination register is the register that will be changed, and the source register will contain what is read. There are several types of instructions, which determine how many source, destination, and immediates (32 bit numbers) are included as a parameter for the instruction.&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:12pt; font-weight:600;&quot;&gt;What is .data and .text?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;These are tags that determine how the instructions below are interpreted. .data refers to resources such as ascii strings while .text refers to regular code. &lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page1_2">
     <widget class="QLabel" name="label_22">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;The addi Instruction&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The addi (Add Immediate) instruction in MIPS assembly language is used to add a signed 32-bit immediate value to the contents of a register and store the result in another register. The syntax for the addi instruction is as follows:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $destination, $source, immediate&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;- `$destination`: The register where the result of the addition will be stored.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;- `$source`: The register containing the value to which the immediate will be added.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;- `immediate`: A signed 32-bit immediate value that will be added to the contents of the `$source` register.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;For example: &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $t0, $t1, -100&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;This instruction adds the immediate value 100 to the contents of register `$t1` and stores the result in register `$t0`. The add instruction is similar to addi, but uses all registers as parameters:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;add $t1, $t3, $t0 # store $t3+$t0 in $t1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The sub and subi instruction also exist as pseudo-instructions, meaning they are translated to add instructions at compile time:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;subi $t1, $t3, 5&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Translates to:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $t1, $t3, -5&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page1_3">
     <widget class="QLabel" name="label_23">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;The $zero Register&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In MIPS assembly language, the $zero register is a special register &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;that always contains the value zero. It is a hardwired register and &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;cannot be modified. The $zero register can be used in various ways, including storing an immediate value in a register like so:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $t0, $zero, 11 # store 11 in $t0&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="scaledContents">
       <bool>false</bool>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page1_4">
     <widget class="QLabel" name="label_58">
      <property name="geometry">
       <rect>
        <x>430</x>
        <y>100</y>
        <width>511</width>
        <height>191</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Try it yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Challenge 1:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;A secret value has been placed in register $a0.&lt;/p&gt;&lt;p&gt;Use the addi instruction to add 3 to the value in $a0, then place that updated value in the $v0 register (commonly used for a return value). Click check solution to see if your answer is correct!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page2_1">
     <widget class="QLabel" name="label_33">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;SRL (Shift Right Logical)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The MIPS 'srl' (Shift Right Logical) instruction shifts the bits of a register to the right by a specified number of positions. Each bit is shifted to the next lower position, and 0s are introduced at the most significant bit.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Suppose we have the following value in a register:&lt;/p&gt;&lt;p&gt;$t0 = 0b10101010 (decimal 170)&lt;/p&gt;&lt;p&gt;Performing srl $t1, $t0, 3 will shift the bits in $t0 right by 3 positions and store the result in $t1:&lt;/p&gt;&lt;p&gt;$t1 = 0b00010101 (decimal 21)&lt;/p&gt;&lt;p&gt;After shifting right by 3 positions, the original bits are moved three places to the right, and zeros are filled in on the left.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;SLL (Shift Left Logical)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The MIPS sll (Shift Left Logical) instruction shifts the bits of a register to the left by a specified number of positions. Each bit is shifted to the next higher position, and 0s are introduced at the least significant bit.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example&lt;/span&gt;:&lt;/p&gt;&lt;p&gt;Suppose we have the following value in a register:&lt;/p&gt;&lt;p&gt;$t0 = 0b00001111 (decimal 15)&lt;/p&gt;&lt;p&gt;Performing sll $t1, $t0, 4 will shift the bits in $t0 left by 4 positions and store the result in $t1:&lt;/p&gt;&lt;p&gt;$t1 = 0b11110000 (decimal 240)&lt;/p&gt;&lt;p&gt;The SLL operation multiplies the number by 2 for each shift position if the number is unsigned&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page2_2">
     <widget class="QLabel" name="label_34">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Shift Left and Shift Right&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In MIPS assembly language, SLL (Shift Left Logical) and SRL (Shift Right Logical) are bitwise operations that can effectively be used to multiply and divide numbers by powers of two. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Understanding these operations can significantly enhance your ability to write efficient code for arithmetic operations. Here’s a detailed guide on how these operations work and how they correspond to multiplication and division.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Use in Multiplication: &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Shifting bits to the left by one position effectively multiplies the binary number by 2. For example, if you have a binary number '0001' (which is 1 in decimal) and you apply SLL by 1, it becomes '0010', which is 2 in decimal.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Use in Division: &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Shifting bits to the right by one position effectively divides the binary number by 2 (ignoring the remainder). For example, if you have a binary number '0010' (which is 2 in decimal) and you apply SRL by 1, it becomes '0001', which is 1 in decimal.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page2_3">
     <widget class="QLabel" name="label_35">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Try it yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Challenge 2:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;For this challenge, please isolate the least significant 8 bits of the number stored in $a0 by using srl and sll, and store that result in $v0.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;If the number in a0 is 001011001110111, then $v0 should hold 01110111. (These binary sequences are assumed to be prepended with zeros to extend them to 32 bits)&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page3_1">
     <widget class="QLabel" name="label_36">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;How to Define an ASCII String&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;A string needs to be defined after a .data tag. The declaration should be preceded by an asciiz operator and a label. For example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;.data&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;helloText: .asciiz &amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;This example stores the text &amp;quot;Hello World!&amp;quot; as ascii characters refered to by the label &amp;quot;helloText&amp;quot;. Each character takes up one byte in memory, so a single word can store 4 characters. This is important later for navigating through a string, one character at a time.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;After defining any strings, a .text tag should be used to signify that everything following it is code.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page3_2">
     <widget class="QLabel" name="label_37">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;What is a syscall?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;A syscall is a Mips instruction that tells the operating system to do something that the program can't do itself. A syscall is called by simply typing syscall. It uses the value in $v0 as an opcode, which dictates what the syscall will do. Any parameters the syscall needs are stored in the $a0 register. A syscall to write a string to the console might look like this:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;.text&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;la $a0, helloText&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $v0, $zero, 4&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;syscall&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In the above example, &amp;quot;la $a0, helloText&amp;quot; loads the address of the string refered to by the label helloText, defined in Learn 1 under the .data tag, into $a0. This is the parameter for the syscall. &amp;quot;addi $v0, $zero, 4&amp;quot; sets the value of $v0 to 4. 4 is the op code to print a string. When printing an integer or char, $a0 should contain the actual integer or char and not an address. What exact codes are supported depends on the assembler, the program that converts mips to real machine code. The codes supported in the LearnMips app are:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;1: Print Integer&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;4: Print String&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;10: Exit&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;11: Print Char&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page3_3">
     <widget class="QLabel" name="label_38">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Try It Yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Challenge 3: The Mystery of the Stolen Eggs&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Jerry is a known egg thief. To figure out how many eggs Jerry has stolen, you must print the value Jerry hid in $s0 that shows the full extent of his crimes, however, you must reveal this to your friends and a simple number isn't dramatic enough. Give the number some context when you print it out.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In this challenge, you will define a string that contains &amp;quot;Jerry STOLE &amp;quot; and another string that contains &amp;quot; eggs on his spree!&amp;quot; (note the spaces after &amp;quot;stole&amp;quot; and before &amp;quot;eggs&amp;quot;).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;You will then print &amp;quot;Jerry STOLE &amp;quot; + $s0 + &amp;quot; eggs on his spree!&amp;quot; to the console. The solution is case sensitive&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page4_1">
     <widget class="QLabel" name="label_39">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>401</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:600;&quot;&gt;Labels and Branch Instructions&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Labels and branch instructions are used to control the flow of execution in a program. Here's a brief overview of how they work:&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:14pt; font-weight:600;&quot;&gt;Labels&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Labels are used to mark specific locations in your code. They are defined by placing a label name followed by a colon (&lt;span style=&quot; font-family:'monospace';&quot;&gt;:&lt;/span&gt;) at the beginning of a line. (valid labels are alphanumeric, no spaces). Labels can be referenced by branch or jump instructions to change the program counter and execution flow.&lt;/p&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:large; font-weight:700;&quot;&gt;Branch Instructions&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;j&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Jump)&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;j examplelabel&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Unconditionally jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Execution continues from the instruction at the label.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;beq&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch If Equal)&lt;/span&gt;&lt;/h3&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;beq $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the values are equal, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the values are not equal, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
     <widget class="QLabel" name="label_24">
      <property name="geometry">
       <rect>
        <x>640</x>
        <y>210</y>
        <width>431</width>
        <height>311</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;blt&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch if Less Than)&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;blt $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is less than the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is greater than or equal to the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;bgt&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch if Greater Than)&lt;/span&gt;&lt;/h3&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;bgt $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is greater than the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is less than or equal to the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
     <widget class="QLabel" name="label_59">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>510</y>
        <width>841</width>
        <height>51</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt;By using labels and branch instructions, you can create conditional statements, loops, and control the overall flow of your program. &lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page4_2">
     <widget class="QLabel" name="label_40">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Here is an example mips program for-loop for reference:&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;main:&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; addi $t0, $zero, 0 # initialize counter i to 0&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; addi $t1, $zero, 5 # set the upper bound to 5&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; addi $t2, $zero, 0 # initialize sum to 0&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace'; font-size:12pt;&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;loop:&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; bgt $t0, $t1, end_loop # if i &amp;gt; 5, jump to end_loop&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; add $t2, $t2, $t0  # sum = sum + i&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; addi $t0, $t0, 1 # i = i + 1&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; j loop    # jump back to the beginning of the loop&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace'; font-size:12pt;&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;end_loop:&lt;/span&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="textFormat">
       <enum>Qt::AutoText</enum>
      </property>
      <property name="scaledContents">
       <bool>false</bool>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page4_3">
     <widget class="QLabel" name="label_41">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;Try it yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Challenge 4:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The goal of this challenge is to calculate the sum of the numbers from 0 to whatever is in $a0, with a specific condition: If the current number is less than 5, add 5 to the sum. Otherwise, add the current number to the sum, and store the sum in $v0.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page5_1">
     <widget class="QLabel" name="label_60">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:14pt; font-weight:700;&quot;&gt;Loads, Stores, and the Stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:12pt;&quot;&gt;The lw (load word) and sw (store word) opcodes are used to transfer data between memory and registers in MIPS assembly. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:12pt;&quot;&gt;They are commonly used in conjunction with the sp (stack pointer) register to manipulate the stack.&lt;/span&gt;&lt;/p&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:12pt; font-weight:600;&quot;&gt;lw (Load Word):&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:11pt;&quot;&gt;Syntax: lw $t0, offset($s0)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:10pt;&quot;&gt;The lw instruction loads a 32-bit word from memory into a register.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:10pt;&quot;&gt;It calculates the memory address by adding the offset (a constant immediate value) to the contents of the source register $s0.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:10pt;&quot;&gt;The loaded word is then stored in the target register $t0.&lt;/span&gt;&lt;/p&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:600;&quot;&gt;sw (Store Word):&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:11pt;&quot;&gt;Syntax: sw $t0, offset($s0)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:10pt;&quot;&gt;The sw instruction stores a 32-bit word from a register into memory.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:10pt;&quot;&gt;It calculates the memory address by adding the offset (a constant value) to the contents of the source register $s0.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:10pt;&quot;&gt;The word from the target register $t0 is then stored at the calculated memory address.&lt;/span&gt;&lt;/p&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:600;&quot;&gt;sp (Stack Pointer):&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:10pt;&quot;&gt;The sp register is a special-purpose register used to point to the top of the stack.&lt;br/&gt;It is conventionally used to manage the stack, which is a region of memory used for temporary storage.&lt;br/&gt;The stack grows downward in memory, so the sp register is decremented when pushing data onto the stack and incremented when popping data off the stack.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:11pt;&quot;&gt;NOTE: You must subtract from the $sp register before storing on the stack otherwise there will not be room to store anything.&lt;br/&gt;&lt;/span&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;Example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;addi $sp, $sp, -4 # make room for one 32 bit value&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;# ... loads and stores here .. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;addi $sp, $sp, 4 # don't need the value on the stack any more&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page5_2">
     <widget class="QLabel" name="label_42">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Example Usage:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Push a word onto the stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;# Decrement stack pointer by 8 bytes (enough for 2 words)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;addi $sp, $sp, -8&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;sw $t0, 0($sp)# Store word from $t0 on the stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;sw $t1, 4($sp)# Store word from $t1 on the stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Pop a word from the stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;lw $s0, 0($sp)# Load word from stack to $s0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;lw $s1, 4($sp)# Load word from stack to $s0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;addi $sp, $sp, 8 # Increment stack pointer by 4 bytes&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page5_3">
     <widget class="QLabel" name="label_43">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Try it yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Challenge 5:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Load in 3 32-bit words from the stack (access with stack pointer), and then add them all together and store it at offset 60 in the stack pointer register. &lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page6_1">
     <widget class="QLabel" name="label_44">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Loading Bytes in MIPS&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In MIPS assembly language, there are three main instructions used for loading and storing 8 bits of data between memory and registers.&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:x-large; font-weight:700;&quot;&gt;lb&lt;/span&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt; (Load Byte)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;lb&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt; instruction is used to load a single byte (8 bits) from memory into the lower 8 bits of a register. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Syntax: &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;lb $t0, 0($s0)&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:x-large; font-weight:700;&quot;&gt;sb&lt;/span&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt; (Store Byte)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;sb&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt; instruction is used to store a single byte (8 bits) from a register into memory. Only the least significant byte of the register is stored.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Syntax: &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;sb $t0, 0($s0)&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:x-large; font-weight:700;&quot;&gt;la&lt;/span&gt;&lt;span style=&quot; font-size:x-large; font-weight:700;&quot;&gt; (Load Address)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;la&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt; instruction is a pseudoinstruction that is used to load the address of a label or a memory location into a register.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Syntax: &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;la $t0, label&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page6_2">
     <widget class="QLabel" name="label_45">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Interacting with .asciiz Strings using lb and sb&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In MIPS assembly language, you can interact with &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;.asciiz&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt; strings using the &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;lb&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;sb&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;, and &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;la&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt; instructions. Here's how you can use these instructions to manipulate strings:&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Loading a String Address&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;To access a string, you first need to load its address into a register using the &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;la&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt; instruction.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;.data&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; str: .asciiz &amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace'; font-size:12pt;&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;.text&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; # Load address of str into $t0&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt; la $t0, myString &lt;/span&gt;&lt;/pre&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Loading Characters from a String&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;To load individual characters from a string, you can use the &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;lb&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt; instruction along with the address stored in a register.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;# Load the first character ('H') into $t1&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;    lb $t1, 0($t0)&lt;br/&gt;    # Load the second character ('e') into $t2 &lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;    lb $t2, 1($t0)      &lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;You can use offsets from the base address to access different characters in the string.&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Storing Characters in a String&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;To store characters in a string, you can use the &lt;/span&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;sb&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt; instruction along with the address stored in a register.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;    # Load the character 'a' into $t3    &lt;br/&gt;    addi $t3, $zero, 97&lt;br/&gt;    # Store 'A' as the first character of str   &lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:12pt;&quot;&gt;    sb $t3, 0($t0)     &lt;/span&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page6_3">
     <widget class="QLabel" name="label_46">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Try it yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Challenge 6:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;There is a string stored in the data section under the label myString. Please load the address of myString into a register of choise, and iterate through the string by incrementing the address by one byte and loading 8 bits until the null terminating character (0x00) is reached. For each character (assume each character is alphabetic), you should add the correct ammount to that character code to make it a capital letter, then re store it in the correct position in the string.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page7_1">
     <widget class="QLabel" name="label_47">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;The xor Instruction&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The MIPS &amp;quot;xor&amp;quot; (exclusive OR) and &amp;quot;xori&amp;quot; (exclusive OR immediate) instructions perform a bitwise XOR operation on two operands. The &amp;quot;xor&amp;quot; instruction operates on two registers, while &amp;quot;xori&amp;quot; operates on a register and an immediate value.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Example:&lt;/span&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;&lt;br/&gt;Suppose we have the following values in registers:&lt;br/&gt;$t0 = 0b1010 (decimal 10)&lt;br/&gt;$t1 = 0b1100 (decimal 12)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Performing &amp;quot;xor $t2, $t0, $t1&amp;quot; will result in:&lt;br/&gt;$t2 = 0b0110 (decimal 6)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The XOR operation compares each bit of the operands and sets the corresponding bit in the result to 1 if the bits are different, and 0 if they are the same. In this example, the bits in positions 2 and 3 of $t0 and $t1 differ, so those bits are set to 1 in the result, while the other bits are set to 0.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page7_2">
     <widget class="QLabel" name="label_48">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;One-Time Pad Encryption&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;A one-time pad (OTP) is a simple yet theoretically unbreakable encryption technique that uses a secret random key (the &amp;quot;pad&amp;quot;) to encrypt a message. The key must be at least as long as the message and is used only once, hence the name &amp;quot;one-time&amp;quot; pad.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In OTP encryption, each bit or character of the plaintext message is XORed with the corresponding bit or character of the key. The resulting ciphertext can only be decrypted by XORing it with the same key.&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;For example, let's say we have a plaintext message &amp;quot;HELLO&amp;quot; and an arbitrary key &amp;quot;XMCKL&amp;quot; as binary:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Plaintext: 01001000 01000101 01001100 01001100 01001111&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Key: 01011000 01001101 01000011 01001011 01001100&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Ciphertext: 00010000 00001000 00001111 00000111 00000011&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The ciphertext is obtained by XORing each bit of the plaintext with the corresponding bit of the key. Decryption follows the same process, XORing the ciphertext with the key to recover the original plaintext.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;OTP encryption is unbreakable if the key is truly random, as long as the message, and never reused.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page7_3">
     <widget class="QLabel" name="label_49">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Try it yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Challenge 7:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In this challenge, you will implement a simple XOR encryption program in MIPS assembly. The plaintext to be encrypted is stored at the &amp;quot;plaintext&amp;quot; symbol, and the encryption key is stored at the &amp;quot;key&amp;quot; symbol. Your task is to XOR each byte of the plaintext with the corresponding byte of the key and store the resulting ciphertext in a new symbol called &amp;quot;ciphertext&amp;quot;, and store the size of the ciphertext (in bytes) in $v0.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Before attempting the challenge, we encourage you to use the editor to write and run your own code using the stored plaintext and key. Feel free to use the print character (syscall 11) to print the ciphertext character by character when testing to verify if its working or not. &lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page8_1">
     <widget class="QLabel" name="label_50">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Jal and Jr&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The jal (jump and link) instruction jumps to a label and automatically stores the location of where it was called from in $ra (abbreviation of return address). The jr (jump return) instruction jumps to the value in $ra, or somewhere else. This can be used to implement something similar to a function. When calling jal, any values that are still needed in $t0-8 need to be saved (sw, sb, etc.) before the jal. In the context of a function, these values would need to be saved by the caller, and loaded (lw, lb, etc.) after the jal instruction. $s0-8 should be saved and loaded inside of the jal. It is standard practice to place return values in $v0-3. Let's look at an example where there are needed values in $t0 and $s0.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;sw $t0, 0($sp) #store $t0&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $sp, $sp, -4 #increment stack pointer&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;jal doStuff #jump and link to doStuff&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;lw $t0, 0($sp) #load $t0 after the jal&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;j end #jump to the end of the program&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;doStuff:&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;sw $s0, 0($sp) #store $s0&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $s0, $a0, 5 #modify $s0 and add 5 to $a0&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $v0, $s0, 0 #put the resulting value into $v0&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;lw $s0, 0($sp) #load $s0 before returning&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;jr $ra #return to the jal call and continue executing the code&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;end:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In the above example, there were no nested jals, however, if some code reached through a jal needs to execute a jal itself, $ra needs to be saved before the call and loaded after the call for the nested calls to work smoothly&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page8_2">
     <widget class="QLabel" name="label_51">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Try it Yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Challenge 8:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In this challenge, a secret value has been placed in $s1. The below code runs before what is in the editor:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;j skipFunction:&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addSecretNumber:&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;add $v1, $a0, $s1&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;jr $ra&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;skipFunction:&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;jal addFive&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;First, set $a0 to 10 and then use jal to jump to the addSecretNumberLabel. Second, create a label &amp;quot;addFive&amp;quot; that adds five to the value in $a0 and puts the resulting value in $v0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Hint: &lt;/span&gt;You should treat the addFive label as a function and ensure that it isnt called or inadvertently executed by your code. It will be called by the code executed before your code when it is jumped to. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page9_1">
     <widget class="QLabel" name="label_52">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Fibonacci sequence:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The Fibonacci sequence is a famous mathematical sequence named after the Italian mathematician Leonardo Fibonacci. It is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes like this: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;The formula for the Fibonacci sequence is:&lt;br/&gt;F(n) = F(n-1) + F(n-2), where F(0) = 0 and F(1) = 1&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page9_2">
     <widget class="QLabel" name="label_53">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>841</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;Methods for Calculating the Nth Term of a Fibonacci Sequence&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        1.  Recursive Method:&lt;br/&gt;The recursive method is based on the definition of the Fibonacci sequence, where each number is the sum of the two preceding ones. The recursive formula is:&lt;/p&gt;&lt;p&gt;F(n) = F(n-1) + F(n-2), where F(0) = 0 and F(1) = 1&lt;/p&gt;&lt;p&gt;To calculate the nth Fibonacci number using the recursive method, you call the function with n as the argument. The function then calls itself with n-1 and n-2 as arguments until it reaches the base cases of F(0) or F(1).&lt;/p&gt;&lt;p&gt;Example:&lt;br/&gt;To calculate F(5), the recursive method will follow these steps:&lt;br/&gt;F(5) = F(4) + F(3)&lt;br/&gt;F(4) = F(3) + F(2)&lt;br/&gt;F(3) = F(2) + F(1)&lt;br/&gt;F(2) = F(1) + F(0)&lt;/p&gt;&lt;p&gt;The recursive method is straightforward to understand and implement, but it can be inefficient for large values of n due to the repeated calculations of the same Fibonacci numbers.&lt;/p&gt;&lt;ol start=&quot;2&quot; style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Formula:&lt;br/&gt;The closed-form formula, also known as Binet's formula, calculates the nth Fibonacci number directly without recursion. The formula is:&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;F(n) = (φ^n - ψ^n) / √5&lt;/p&gt;&lt;p&gt;where:&lt;/p&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;φ (phi) is the golden ratio: (1 + √5) / 2 ≈ 1.618&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;ψ (psi) is the negative reciprocal of φ: (1 - √5) / 2 ≈ -0.618&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To calculate the nth Fibonacci number using Binet's formula, you simply plug in the value of n into the formula and evaluate it.&lt;/p&gt;&lt;p&gt;Binet's formula is more efficient than the recursive method for calculating large Fibonacci numbers because it directly computes the value without recursive calls.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page9_3">
     <widget class="QLabel" name="label_54">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Try it yourself!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:700;&quot;&gt;Bonus Challenge:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;For this bonus challenge, please calculate the nth term of the fibonacci sequence, where $a0 contains the value of n.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Since dividing, powers, and square roots are hard to compute with only mips, the easiest route is to use teh recursive method.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Store the nth term of the fibonacci sequence in $v1.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Hint: &lt;/span&gt;you may need to use $v0 to store the exit code, which is why v1 has the return for this challenge.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
    <widget class="QWidget" name="page12_1">
     <widget class="QLabel" name="label_56">
      <property name="geometry">
       <rect>
        <x>230</x>
        <y>0</y>
        <width>411</width>
        <height>701</height>
       </rect>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:14pt; font-weight:700;&quot;&gt;Free Editor&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Code whatever you want. In Learn Mips, only some of the MIPS instructions are implemented. To explore all of MIPS and have access to debugging tools and a way to see what data is held in registers and addresses in memory, download a MIPS Assembler like MARS.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;MARS Download: &lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://courses.missouristate.edu/KenVollmar/MARS/download.htm&quot;&gt;&lt;span style=&quot; font-size:12pt; text-decoration: underline; color:#007af4;&quot;&gt;https://courses.missouristate.edu/KenVollmar/MARS/download.htm&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
      </property>
      <property name="wordWrap">
       <bool>true</bool>
      </property>
     </widget>
    </widget>
   </widget>
   <zorder>pageWidget</zorder>
   <zorder>codingGroupBox</zorder>
   <zorder>nextButton</zorder>
   <zorder>sideMenuWidget</zorder>
   <zorder>previousButton</zorder>
  </widget>
  <widget class="QMenuBar" name="menubar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>1323</width>
     <height>22</height>
    </rect>
   </property>
   <widget class="QMenu" name="menuFile">
    <property name="title">
     <string>File</string>
    </property>
    <addaction name="actionSave_All_Progress"/>
    <addaction name="actionLoad_All_Progress"/>
   </widget>
   <widget class="QMenu" name="menuHelp">
    <property name="title">
     <string>Help</string>
    </property>
    <addaction name="actionInstruction_Reference"/>
    <addaction name="actionSyscall_Op_Code_Reference"/>
   </widget>
   <addaction name="menuFile"/>
   <addaction name="menuHelp"/>
  </widget>
  <widget class="QStatusBar" name="statusbar"/>
  <action name="actionSave_All_Progress">
   <property name="text">
    <string>Save All Progress</string>
   </property>
  </action>
  <action name="actionLoad_All_Progress">
   <property name="text">
    <string>Load All Progress</string>
   </property>
  </action>
  <action name="actionInstruction_Reference">
   <property name="text">
    <string>Instruction Reference</string>
   </property>
  </action>
  <action name="actionSyscall_Op_Code_Reference">
   <property name="text">
    <string>Syscall Op Code Reference</string>
   </property>
  </action>
 </widget>
 <customwidgets>
  <customwidget>
   <class>CodeEditor</class>
   <extends>QTextEdit</extends>
   <header>codeeditor.h</header>
  </customwidget>
  <customwidget>
   <class>TabButton</class>
   <extends>QPushButton</extends>
   <header>tabbutton.h</header>
  </customwidget>
 </customwidgets>
 <resources>
  <include location="resource.qrc"/>
 </resources>
 <connections/>
</ui>
